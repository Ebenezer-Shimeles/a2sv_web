{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst task = createSlice({\n  name: 'task',\n  reducers: {\n    addTask: (state, action) => {\n      var _state$tasks$length;\n      const obj = action.payload;\n      obj.i = (_state$tasks$length = state.tasks.length) !== null && _state$tasks$length !== void 0 ? _state$tasks$length : 0;\n      state.tasks.push(obj); //This works because of immer \n    },\n\n    checkTask: (state, action) => {\n      const index = action.payload;\n      if (index >= state.tasks.length || index < 0) {\n        throw new Error(\"Error this index is wrong\");\n      }\n      state.tasks[index].isChecked = true;\n    },\n    unCheckTask: (state, action) => {\n      const index = action.payload;\n      if (index >= state.tasks.length || index < 0) {\n        throw new Error(\"Error this index is wrong\");\n      }\n      state.tasks[index].isChecked = false;\n    },\n    removeTask: (state, action) => {\n      const index = action.payload;\n      if (index >= state.tasks.length || index < 0) {\n        throw new Error(\"Error this index is wrong\");\n      }\n      state.tasks.splice(index, 1);\n      let i = 0;\n      for (const task of state.tasks) {\n        task.i = i;\n        i++;\n      }\n    },\n    editTask: (state, action) => {\n      const index = action.payload.index;\n      if (index >= state.tasks.length || index < 0) {\n        throw new Error(\"Error this index is wrong \" + index);\n      }\n      state.tasks[index].todo = action.payload.newTask;\n    }\n  },\n  initialState: {\n    tasks: []\n  }\n});\nconst {\n  addTask,\n  checkTask,\n  removeTask,\n  editTask,\n  unCheckTask\n} = task.actions;\nexport { addTask, checkTask, removeTask, editTask, unCheckTask };\nexport default task.reducer;","map":{"version":3,"names":["createSlice","task","name","reducers","addTask","state","action","_state$tasks$length","obj","payload","i","tasks","length","push","checkTask","index","Error","isChecked","unCheckTask","removeTask","splice","editTask","todo","newTask","initialState","actions","reducer"],"sources":["/home/ebenezer/learn/a2sv-web/todos-cy/src/store/task.ts"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { stat } from \"fs\";\n\n\n\nexport type Task ={\n    isChecked: boolean\n    todo: string;\n    i: number;\n\n};\n\n\nconst task = createSlice({\n    name: 'task',\n    reducers: {\n        addTask: (state, action)=>{\n            const obj = action.payload\n            obj.i = state.tasks.length ?? 0\n            state.tasks.push(obj as Task) //This works because of immer \n\n        },\n        checkTask:(state, action)=>{\n            const index = action.payload as number;\n            if(index >= state.tasks.length || index < 0){\n                throw new Error(\"Error this index is wrong\")\n            }\n            state.tasks[index].isChecked = true;\n\n        },\n        unCheckTask:(state, action)=>{\n            const index = action.payload as number;\n            if(index >= state.tasks.length || index < 0){\n                throw new Error(\"Error this index is wrong\")\n            }\n            state.tasks[index].isChecked = false;\n            \n\n        },\n        removeTask:(state, action)=>{\n            const index = action.payload as number;\n            if(index >= state.tasks.length || index < 0){\n                throw new Error(\"Error this index is wrong\")\n            }\n            state.tasks.splice(index, 1);\n            let i = 0;\n           for(const task of state.tasks){\n               task.i = i;\n               i ++\n           }\n\n        },\n        editTask:(state, action)=>{\n            const index = action.payload.index as number;\n            if(index >= state.tasks.length || index < 0){\n                throw new Error(\"Error this index is wrong \" + index)\n            }\n            state.tasks[index].todo  = action.payload.newTask;\n        }\n    \n    },\n    initialState:{\n        tasks:  [] as Task[]\n    }\n})\n\nconst  {addTask, checkTask, removeTask, editTask, unCheckTask} = task.actions\n\nexport {addTask, checkTask, removeTask, editTask,unCheckTask }\n\nexport default task.reducer"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAa9C,MAAMC,IAAI,GAAGD,WAAW,CAAC;EACrBE,IAAI,EAAE,MAAM;EACZC,QAAQ,EAAE;IACNC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAG;MAAA,IAAAC,mBAAA;MACtB,MAAMC,GAAG,GAAGF,MAAM,CAACG,OAAO;MAC1BD,GAAG,CAACE,CAAC,IAAAH,mBAAA,GAAGF,KAAK,CAACM,KAAK,CAACC,MAAM,cAAAL,mBAAA,cAAAA,mBAAA,GAAI,CAAC;MAC/BF,KAAK,CAACM,KAAK,CAACE,IAAI,CAACL,GAAW,CAAC,EAAC;IAElC,CAAC;;IACDM,SAAS,EAACA,CAACT,KAAK,EAAEC,MAAM,KAAG;MACvB,MAAMS,KAAK,GAAGT,MAAM,CAACG,OAAiB;MACtC,IAAGM,KAAK,IAAIV,KAAK,CAACM,KAAK,CAACC,MAAM,IAAIG,KAAK,GAAG,CAAC,EAAC;QACxC,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;MAChD;MACAX,KAAK,CAACM,KAAK,CAACI,KAAK,CAAC,CAACE,SAAS,GAAG,IAAI;IAEvC,CAAC;IACDC,WAAW,EAACA,CAACb,KAAK,EAAEC,MAAM,KAAG;MACzB,MAAMS,KAAK,GAAGT,MAAM,CAACG,OAAiB;MACtC,IAAGM,KAAK,IAAIV,KAAK,CAACM,KAAK,CAACC,MAAM,IAAIG,KAAK,GAAG,CAAC,EAAC;QACxC,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;MAChD;MACAX,KAAK,CAACM,KAAK,CAACI,KAAK,CAAC,CAACE,SAAS,GAAG,KAAK;IAGxC,CAAC;IACDE,UAAU,EAACA,CAACd,KAAK,EAAEC,MAAM,KAAG;MACxB,MAAMS,KAAK,GAAGT,MAAM,CAACG,OAAiB;MACtC,IAAGM,KAAK,IAAIV,KAAK,CAACM,KAAK,CAACC,MAAM,IAAIG,KAAK,GAAG,CAAC,EAAC;QACxC,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;MAChD;MACAX,KAAK,CAACM,KAAK,CAACS,MAAM,CAACL,KAAK,EAAE,CAAC,CAAC;MAC5B,IAAIL,CAAC,GAAG,CAAC;MACV,KAAI,MAAMT,IAAI,IAAII,KAAK,CAACM,KAAK,EAAC;QAC1BV,IAAI,CAACS,CAAC,GAAGA,CAAC;QACVA,CAAC,EAAG;MACR;IAEH,CAAC;IACDW,QAAQ,EAACA,CAAChB,KAAK,EAAEC,MAAM,KAAG;MACtB,MAAMS,KAAK,GAAGT,MAAM,CAACG,OAAO,CAACM,KAAe;MAC5C,IAAGA,KAAK,IAAIV,KAAK,CAACM,KAAK,CAACC,MAAM,IAAIG,KAAK,GAAG,CAAC,EAAC;QACxC,MAAM,IAAIC,KAAK,CAAC,4BAA4B,GAAGD,KAAK,CAAC;MACzD;MACAV,KAAK,CAACM,KAAK,CAACI,KAAK,CAAC,CAACO,IAAI,GAAIhB,MAAM,CAACG,OAAO,CAACc,OAAO;IACrD;EAEJ,CAAC;EACDC,YAAY,EAAC;IACTb,KAAK,EAAG;EACZ;AACJ,CAAC,CAAC;AAEF,MAAO;EAACP,OAAO;EAAEU,SAAS;EAAEK,UAAU;EAAEE,QAAQ;EAAEH;AAAW,CAAC,GAAGjB,IAAI,CAACwB,OAAO;AAE7E,SAAQrB,OAAO,EAAEU,SAAS,EAAEK,UAAU,EAAEE,QAAQ,EAACH,WAAW;AAE5D,eAAejB,IAAI,CAACyB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}